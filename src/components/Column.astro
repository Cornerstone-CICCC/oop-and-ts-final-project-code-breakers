---
import Task from './Task.astro';
import AddTaskModal from './AddTaskModal.astro';
import type { ColumnData } from '../types';

interface Props {
  data: ColumnData;
  columnIndex: number;
}

const { data, columnIndex } = Astro.props;
---

<div class="bg-slate-100 rounded-lg p-4">
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-base font-semibold">{data.title}</h2>
    <div class="flex gap-2">
      <button class="p-1 hover:bg-slate-200 rounded add-task-button" data-column={data.title}>
        +
      </button>
      <button class="p-1 hover:bg-slate-200 rounded">•••</button>
    </div>
  </div>
  <div
    class="flex flex-col gap-4 min-h-[200px] task-container"
    data-column-index={columnIndex}
    data-column-title={data.title}
    ondrop="dropTask(event)"
    ondragover="allowDrop(event)"
  >
    {
      data.tasks.map((task, index) => (
        <Task data={task} taskId={`task-${columnIndex}-${index}`} columnTitle={data.title} />
      ))
    }
  </div>
  <AddTaskModal columnTitle={data.title} />
</div>

<script>
  function onModalOpen(columnTitle) {
    const modal = document.getElementById(`modal-${columnTitle}`);
    if (modal instanceof HTMLDialogElement) {
      modal.showModal();
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.add-task-button').forEach((button) => {
      button.addEventListener('click', () => {
        const columnTitle = button.getAttribute('data-column');
        if (columnTitle) {
          onModalOpen(columnTitle);
        }
      });
    });

    document.addEventListener('task-added', (e) => {
      const { task, columnTitle } = e.detail;

      const column = document.querySelector(`.task-container[data-column-title="${columnTitle}"]`);
      if (!column) return;

      const taskElement = document.createElement('div');
      taskElement.id = task.id;
      taskElement.setAttribute('draggable', 'true');
      taskElement.setAttribute('data-task-id', task.id);
      taskElement.setAttribute('data-task-title', task.title);
      taskElement.setAttribute('data-task-category', task.category);
      taskElement.classList.add(
        'bg-white',
        'rounded-lg',
        'p-4',
        'relative',
        'shadow-sm',
        'cursor-move',
        'task-card',
      );

      taskElement.innerHTML = `
        <div class="text-xs text-slate-500 mb-2">${task.category}</div>
        <h3 class="text-base font-semibold mb-2">${task.title}</h3>
        <p class="text-sm text-slate-500 mb-4">${task.description}</p>
        <div class="flex gap-1"></div>
        
        <div class="relative">
          <button 
            class="absolute top-[-40px] right-[-12px] p-1 hover:bg-slate-100 rounded task-menu-button"
            data-task-id="${task.id}"
          >
            •••
          </button>
          <div 
            id="menu-${task.id}" 
            class="absolute hidden right-[-10px] top-[-30px] bg-white shadow-md rounded-md z-10 task-menu"
          >
            <ul class="py-1">
              <li>
                <button 
                  class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 edit-task-button"
                  data-task-id="${task.id}"
                  data-column-title="${columnTitle}"
                >
                  Edit
                </button>
              </li>
              <li>
                <button 
                  class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100 delete-task-button"
                  data-task-id="${task.id}"
                >
                  Delete
                </button>
              </li>
            </ul>
          </div>
        </div>
      `;

      column.appendChild(taskElement);

      const menuButton = taskElement.querySelector('.task-menu-button');
      menuButton.addEventListener('click', (e) => {
        e.stopPropagation();
        const taskId = menuButton.getAttribute('data-task-id');
        const menu = document.getElementById(`menu-${taskId}`);

        document.querySelectorAll('.task-menu').forEach((m) => {
          if (m.id !== `menu-${taskId}`) {
            m.classList.add('hidden');
          }
        });

        menu.classList.toggle('hidden');
      });

      const editButton = taskElement.querySelector('.edit-task-button');
      editButton.addEventListener('click', () => {
        const modalId = `edit-modal-${task.id}`;
        let modal = document.getElementById(modalId);

        if (!modal) {
          modal = document.createElement('dialog');
          modal.id = modalId;
          modal.className = 'backdrop:bg-black backdrop:bg-opacity-50 p-0 rounded-lg';
          modal.innerHTML = `
            <div class="bg-white p-6 w-full max-w-md">
              <h2 class="text-xl font-semibold mb-4">Edit Task</h2>
              <form method="dialog" id="edit-form-${task.id}">
                <input type="hidden" name="taskId" value="${task.id}" />
                <input type="hidden" name="columnTitle" value="${columnTitle}" />
                <div class="mb-4">
                  <label class="block text-sm font-medium text-gray-700 mb-1">
                    Category
                  </label>
                  <input
                    type="text"
                    name="category"
                    class="w-full p-2 border rounded-md"
                    value="${task.category}"
                    required
                  />
                </div>
                <div class="mb-4">
                  <label class="block text-sm font-medium text-gray-700 mb-1">
                    Title
                  </label>
                  <input
                    type="text"
                    name="title"
                    class="w-full p-2 border rounded-md"
                    value="${task.title}"
                    required
                  />
                </div>
                <div class="mb-6">
                  <label class="block text-sm font-medium text-gray-700 mb-1">
                    Description
                  </label>
                  <textarea
                    name="description"
                    class="w-full p-2 border rounded-md"
                    rows="3"
                    required
                  >${task.description}</textarea>
                </div>
                <div class="flex justify-end gap-2">
                  <button
                    type="button"
                    class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md cancel-button"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
                  >
                    Save Changes
                  </button>
                </div>
              </form>
            </div>
          `;

          document.body.appendChild(modal);

          const cancelButton = modal.querySelector('.cancel-button');
          cancelButton.addEventListener('click', () => {
            modal.close();
          });

          const form = modal.querySelector(`#edit-form-${task.id}`);
          form.addEventListener('submit', (e) => {
            e.preventDefault();
            const formData = new FormData(form);
            const updatedTask = {
              id: formData.get('taskId'),
              category: formData.get('category'),
              title: formData.get('title'),
              description: formData.get('description'),
            };

            document.dispatchEvent(
              new CustomEvent('task-updated', {
                detail: { task: updatedTask },
              }),
            );

            modal.close();
          });
        }

        if (modal instanceof HTMLDialogElement) {
          modal.showModal();
        }

        document.getElementById(`menu-${task.id}`).classList.add('hidden');
      });

      const deleteButton = taskElement.querySelector('.delete-task-button');
      deleteButton.addEventListener('click', () => {
        if (confirm('Are you sure you want to delete this task?')) {
          document.dispatchEvent(
            new CustomEvent('task-deleted', {
              detail: { taskId: task.id },
            }),
          );

          taskElement.remove();
        }

        document.getElementById(`menu-${task.id}`).classList.add('hidden');
      });

      taskElement.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text/plain', task.id);
        e.dataTransfer.effectAllowed = 'move';

        setTimeout(() => {
          taskElement.classList.add('opacity-50');
        }, 0);
      });
    });

    document.addEventListener('task-updated', (e) => {
      const { task } = e.detail;
      const taskElement = document.getElementById(task.id);

      if (taskElement) {
        const categoryEl = taskElement.querySelector('.text-xs.text-slate-500.mb-2');
        const titleEl = taskElement.querySelector('.text-base.font-semibold.mb-2');
        const descriptionEl = taskElement.querySelector('.text-sm.text-slate-500.mb-4');

        if (categoryEl) categoryEl.textContent = task.category;
        if (titleEl) titleEl.textContent = task.title;
        if (descriptionEl) descriptionEl.textContent = task.description;

        taskElement.setAttribute('data-task-title', task.title);
        taskElement.setAttribute('data-task-category', task.category);
      }
    });
  });
</script>
