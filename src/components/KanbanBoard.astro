---
import { statusList } from '../lib/TaskList';
import Column from './Column.astro';
---

<div class="p-8 font-sans">
  <div class="md:grid md:grid-cols-3 md:gap-6 flex gap-6 overflow-x-auto pb-4 snap-x">
    {
      statusList.map((status) => (
        <div class="min-w-[85vw] md:min-w-0 snap-center">
          <Column status={status} />
        </div>
      ))
    }
  </div>
</div>

<script>
  import { taskListInstance, statusList } from '../lib/TaskList';
  import type { Task } from '../types/task';

  //kanban-board
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('#kanban-board');
    statusList.forEach((status) => {
      const taskList = taskListInstance.getTasksByStatus(status);
      const columnDiv = document.createElement('div');
      columnDiv.className = 'min-w-[85vw] md:min-w-0 snap-center';

      const columnContent = `
        <div class="column">
          <h2>${status}</h2>
          <ul>
            ${taskList
              .map(
                (task) => `
              <li>
                <h3>${task.title}</h3>
                <p>${task.description}</p>
              </li>
            `,
              )
              .join('')}
          </ul>
        </div>
      `;

      columnDiv.innerHTML = columnContent;
      container?.appendChild(columnDiv);
    });
  });

  //task card
  function createTaskCardHTML(task: Task) {
    const taskCard = document.createElement('div');
    taskCard.innerHTML = `
        <div>
          <label for="task-${task.id}" class="cursor-pointer">
            <div class="card bg-white shadow-md">
              <div class="card-body p-4">
                <div class="flex justify-between items-start">
                  <h2 class="font-bold text-lg text-gray-800 mb-2">${task.title}</h2>
                  <details id="dropdown-${task.id}" class="dropdown">
                    <summary class="btn border-none bg-transparent shadow-none">
                      <i class="fa-solid fa-ellipsis text-black"></i>
                    </summary>
                    <ul class="menu dropdown-content bg-white text-black rounded-box z-1 w-28 p-2 shadow-sm">
                      <li>
                        <button onclick='console.log("Edit button clicked")'>
                          <i class="fa-solid fa-pen"></i>
                          Edit
                        </button>
                      </li>
                      <li>
                        <button onclick='console.log("Delete Button clicked")'>
                          <i class="fa-solid fa-trash"></i>
                          Delete
                        </button>
                      </li>
                    </ul>
                  </details>
                </div>
                <p class="text-gray-600 text-sm mb-3">${task.description}</p>
              </div>
            </div>
          </label>
          <input type="checkbox" id="task-${task.id}" class="modal-toggle" />
        </div>
      `;
    return taskCard;
  }
  document.addEventListener('DOMContentLoaded', () => {
    statusList.forEach((status) => {
      const container = document.querySelector(`#column-${status.key}`);
      const taskList = taskListInstance.getTasksByStatus(status);
      console.log(taskListInstance.getTasksByStatus(status));

      taskList.forEach((task) => {
        container?.appendChild(createTaskCardHTML(task));
      });
    });
  });

  //modal

  function createModalHTML(task: Task) {
    const modal = document.createElement('div');
    modal.className = 'modal z-1000';
    modal.role = 'dialog';

    modal.innerHTML = `
          <div class="modal-box flex flex-col gap-3">
            <h3 class="text-lg">
              <div
                id="js-title-display-${task.id}"
                class="cursor-pointer font-bold px-4 rounded-lg leading-[3rem] hover:bg-gray-50">
                ${task.title}
              </div>
              <input
                id="js-title-input-${task.id}"
                type="text"
                value=${task.title}
                class="hidden input input-bordered w-full p-4 text-lg leading-[3rem]"
              />
            </h3>
            <div class="h-32 flex grow">
              <p
                id="js-content-display-${task.id}"
                class="size-full p-4 overflow-x-scroll rounded-lg hover:bg-gray-50">
                ${task.description}
              </p>
              <textarea
                id="js-content-input-${task.id}"
                class="hidden input input-bordered size-full p-4 text-base"
                rows="5">${task.description}</textarea
              >
            </div>
              <div class="w-full max-w-xs">
                <div class="relative">
                  <select
                    id="js-content-select-${task.id}"
                    name="task-status"
                    class="select select-bordered w-full pl-4 py-2"
                    onchange="updateStatus(event)">
                    ${statusList
                      .map(
                        (status) => `
                      <option value="${status.key}" ${status.key === task.status.key ? 'selected' : ''}>
                        ${status.value}
                      </option>
                    `,
                      )
                      .join('')}
                  </select>
                </div>
              </div>
            </div>
          </div>
          <label class="modal-backdrop" for="task-${task.id}"></label>
        `;
    return modal;
  }
  document.addEventListener('DOMContentLoaded', () => {
    statusList.forEach((status) => {
      const taskList = taskListInstance.getTasksByStatus(status);
      taskList.forEach((task) => {
        const container = document.querySelector(`#task-${task.id}`);
        container?.parentNode?.appendChild(createModalHTML(task));
      });
    });

    const newTaskButton = document.querySelectorAll('.js-new-task-button');
    newTaskButton.forEach((button) => {
      button.addEventListener('click', (e) => {
        const clickedStatus = (e?.target as Element)?.closest('label')?.getAttribute('for');

        (e?.target as Element)?.closest('div')?.appendChild(
          createModalHTML(
            taskListInstance.add({
              title: 'New Task',
              description: 'New Description',
              status: statusList[0],
            }),
          ),
        );
      });
    });
  });

  function updateTitle(id, newTitle) {
    console.log('updateTitle', id, newTitle);
    const task = taskListInstance.getTaskById(Number(id));
    if (!task) return;
    const update = taskListInstance.update(Number(id), { ...task, title: newTitle });
    console.log('taskListInstance', taskListInstance.getTasks());
  }

  function updateContent(id, newContent) {
    console.log(newContent);
  }

  function updateStatus(event) {
    const newStatus = event.target.value;
    console.log(newStatus);
  }

  document.addEventListener('DOMContentLoaded', () => {
    // title edit
    document.querySelectorAll('[id^=js-title-display]').forEach((titleDisplay) => {
      const taskId = titleDisplay.id.replace('js-title-display-', '');
      const titleInput = document.getElementById(`js-title-input-${taskId}`);

      if (!titleInput) return;

      titleDisplay.addEventListener('click', () => {
        titleDisplay.classList.add('hidden');
        titleInput.classList.remove('hidden');
        titleInput.focus();
      });

      titleInput.addEventListener('blur', async (e) => {
        const newTitle = e.target?.value;
        titleDisplay.textContent = newTitle;
        titleDisplay.classList.remove('hidden');
        titleInput.classList.add('hidden');
        updateTitle(taskId, newTitle);
        const task = taskListInstance.getTaskById(Number(taskId));
        if (!task) return;
        // タスクのタイトルを更新
        const updatedTask = taskListInstance.update(Number(taskId), { title: newTitle });
        console.log('Updated Task:', updatedTask);

        // HTML上のタイトル要素（例:id="js-title-display-<task.id>"）を取得して書き換える
        const titleElement = document.getElementById(`js-title-display-${taskId}`);
        if (titleElement) {
          titleElement.textContent = newTitle;
        }
        // const status = task.status;
        // const container = document.querySelector(`#column-${status.key}`);
        // console.log(taskListInstance.getTasksByStatus(status));
        // container?.appendChild(createTaskCardHTML(task));
      });

      titleInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          titleInput.blur();
        }
      });
    });

    //content edit
    document.querySelectorAll('[id^=js-content-display]').forEach((contentDisplay) => {
      const taskId = contentDisplay.id.replace('js-content-display-', '');
      const contentInput = document.getElementById(`js-content-input-${taskId}`);

      if (!contentInput) return;

      contentDisplay.addEventListener('click', () => {
        contentDisplay.classList.add('hidden');
        contentInput.classList.remove('hidden');
        contentInput.focus();
      });

      contentInput.addEventListener('blur', async (e) => {
        const newContent = e.target?.value;
        contentDisplay.textContent = newContent;
        contentDisplay.classList.remove('hidden');
        contentInput.classList.add('hidden');
        updateContent(taskId, newContent);
      });
    });
  });

  // sample data
  taskListInstance.add({
    title: 'project02',
    description: 'Complete the final assignment for the course',
    status: statusList[0],
  });
  taskListInstance.add({
    title: 'presentation03',
    description: 'Complete the final assignment for the course',
    status: statusList[0],
  });
  taskListInstance.add({
    title: 'test',
    description: 'Complete the final assignment for the course',
    status: statusList[0],
  });
</script>
