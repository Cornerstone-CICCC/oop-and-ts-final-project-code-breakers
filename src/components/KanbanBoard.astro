---
import { statusList } from '../lib/TaskList';
import Column from './Column.astro';
---

<div class="p-8 font-sans">
  <div class="md:grid md:grid-cols-3 md:gap-6 flex gap-6 overflow-x-auto pb-4 snap-x">
    {
      statusList.map((status) => (
        <div class="min-w-[85vw] md:min-w-0 snap-center">
          <Column status={status} />
        </div>
      ))
    }
  </div>
</div>

<script>
  import { taskListInstance, statusList } from '../lib/TaskList';
  import type { Task } from '../types/task';

  //kanban-board
  function renderKanban() {
    const container = document.querySelector('#kanban-board');
    if (!container) return;
    statusList.forEach((status) => {
      const taskList = taskListInstance.getTasksByStatus(status);
      const columnDiv = document.createElement('div');
      columnDiv.className = 'min-w-[85vw] md:min-w-0 snap-center';

      const columnContent = `
        <div class="column">
          <h2>${status}</h2>
          <ul>
            ${taskList
              .map(
                (task) => `
              <li>
                <h3>${task.title}</h3>
                <p>${task.description}</p>
              </li>
            `,
              )
              .join('')}
          </ul>
        </div>
      `;

      columnDiv.innerHTML = columnContent;
      container.appendChild(columnDiv);
    });
  }

  //task card
  function createTaskCardHTML(task: Task) {
    const taskCard = document.createElement('div');
    taskCard.innerHTML = `
        <div id="task-id-${task.id}" class="task-card" data-task-id="${task.id}">
          <label draggable="true" for="task-${task.id}" class="cursor-pointer">
            <div class="card bg-white shadow-md">
              <div class="card-body p-4">
                <div class="flex justify-between items-start">
                  <h2 class="font-bold text-lg text-gray-800 mb-2">${task.title}</h2>
                  <i class="fa-solid fa-trash delete-task-icon" data-taskid="${task.id}"></i>
                </div>
                <p class="text-gray-600 text-sm mb-3">${task.description}</p>
              </div>
            </div>
          </label>
          <input type="checkbox" id="task-${task.id}" class="modal-toggle" />
        </div>
      `;
    // delete task
    const trashIcon = taskCard.querySelector('.delete-task-icon');
    if (trashIcon) {
      trashIcon.addEventListener('click', () => {
        taskListInstance.delete(task.id);
        renderTaskCard();
      });
    }
    return taskCard;
  }
  function renderTaskCard() {
    statusList.forEach((status) => {
      const container = document.querySelector(`#column-${status.key}`);
      if (!container) return;
      const taskList = taskListInstance.getTasksByStatus(status);
      console.log(taskListInstance.getTasksByStatus(status));

      container.innerHTML = '';
      taskList.forEach((task) => {
        container.appendChild(createTaskCardHTML(task));
      });
    });
  }

  //modal

  function createModalHTML(task: Task, id: number) {
    const modal = document.createElement('div');
    modal.className = 'modal z-1000';
    modal.role = 'dialog';

    modal.innerHTML = `
          <div class="modal-box flex flex-col gap-3">
            <h3 class="text-lg">
              <div
                id="js-title-display-${id}"
                class="cursor-pointer font-bold px-4 rounded-lg leading-[3rem] hover:bg-gray-50">
                ${task.title}
              </div>
              <input
                id="js-title-input-${id}"
                type="text"
                value=${task.title}
                class="hidden input input-bordered w-full p-4 text-lg leading-[3rem]"
              />
            </h3>
            <div class="h-32 flex grow">
              <p
                id="js-content-display-${id}"
                class="size-full p-4 overflow-x-scroll rounded-lg hover:bg-gray-50">
                ${task.description}
              </p>
              <textarea
                id="js-content-input-${id}"
                class="hidden input input-bordered size-full p-4 text-base"
                rows="5">${task.description}</textarea
              >
            </div>
              <div class="w-full max-w-xs">
                <div class="relative">
                  <select
                    id="js-content-select-${id}"
                    name="task-status"
                    class="select select-bordered w-full pl-4 py-2">
                    ${statusList
                      .map(
                        (status) => `
                      <option value="${status.key}" ${status.key === task.status.key ? 'selected' : ''}>
                        ${status.value}
                      </option>
                    `,
                      )
                      .join('')}
                  </select>
                </div>
              </div>
            </div>
          </div>
          <label class="modal-backdrop" for="task-${id}"></label>
        `;
    return modal;
  }

  function renderModal() {
    statusList.forEach((status) => {
      const taskList = taskListInstance.getTasksByStatus(status);
      taskList.forEach((task) => {
        const container = document.querySelector(`#task-${task.id}`);
        container?.parentNode?.appendChild(createModalHTML(task, task.id));
        const parentElement = container?.parentNode as Element | null;
        if (!container || !parentElement) return;
        parentElement.querySelector('div.modal')?.remove();
        parentElement.appendChild(createModalHTML(task, task.id));
      });
    });
  }

  // drag and drop
  function dragStart(event) {
    const taskCard = event.target.closest('.task-card');
    if (!taskCard) return;

    event.dataTransfer.setData('text/plain', taskCard.id);
    event.dataTransfer.effectAllowed = 'move';

    setTimeout(() => {
      taskCard.classList.add('opacity-50');
    }, 0);
  }

  function dragEnd(event) {
    event.target.classList.remove('opacity-50');
  }

  window.allowDrop = (event) => {
    console.log('allowDrop');
    event.preventDefault();
  };

  window.dropTask = (event) => {
    event.preventDefault();

    const taskId = event.dataTransfer.getData('text/plain');
    const draggedTask = document.getElementById(taskId);

    if (!draggedTask) return;

    draggedTask.classList.remove('opacity-50');

    const dropContainer = event.target.closest('.task-container');
    console.log(dropContainer);
    if (!dropContainer) return;

    dropContainer.appendChild(draggedTask);

    console.log(
      `Task ${taskId} moved to column ${dropContainer.getAttribute('data-column-index')}`,
    );
  };

  // Render
  document.addEventListener('DOMContentLoaded', () => {
    renderKanban();
    renderTaskCard();
    renderModal();
    addEventListenerModal();
  });

  document.addEventListener('DOMContentLoaded', () => {
    const tasks = document.querySelectorAll('[data-task-id]');
    tasks.forEach((task) => {
      task.addEventListener('dragstart', dragStart);
      task.addEventListener('dragend', dragEnd);
    });
    const newTaskButton = document.querySelectorAll('.js-new-task-button');
    newTaskButton.forEach((button) => {
      button.addEventListener('click', (e) => {
        const value = (e?.target as Element)?.closest('label')?.htmlFor;
        const clickedStatus = value?.replace('task-', '');
        if (!clickedStatus) return;

        const parentDiv = (e?.target as Element)?.closest('div');
        const statusObj = statusList.find((status) => status.key === clickedStatus);
        if (!statusObj || !parentDiv) return;

        const newTask = taskListInstance.add({
          title: 'New Task',
          description: 'New Description',
          status: statusObj,
        });

        const existingModals = parentDiv.querySelectorAll('.modal');
        existingModals.forEach((modal) => modal.remove());

        const modalElement = createModalHTML(newTask, newTask.id);
        parentDiv.appendChild(modalElement);

        const inputElement = parentDiv.querySelector(
          `input[type="checkbox"][id="task-${clickedStatus}"]`,
        );
        if (inputElement) {
          inputElement.id = `task-${newTask.id}`;
        }

        const labelElement = parentDiv.querySelector(`label[for="task-${clickedStatus}"]`);
        if (labelElement) {
          labelElement.setAttribute('for', `task-${newTask.id}`);
        }

        renderTaskCard();
        renderModal();
        addEventListenerModal();
      });
    });
  });

  function addEventListenerModal() {
    // title edit
    document.querySelectorAll('[id^=js-title-display]').forEach((titleDisplay) => {
      const taskId = titleDisplay.id.replace('js-title-display-', '');
      const titleInput = document.getElementById(`js-title-input-${taskId}`);

      if (!titleInput) return;

      titleDisplay.addEventListener('click', () => {
        titleDisplay.classList.add('hidden');
        titleInput.classList.remove('hidden');
        titleInput.focus();
      });

      titleInput.addEventListener('blur', async (e) => {
        const newTitle = e.target?.value;
        titleDisplay.classList.remove('hidden');
        titleInput.classList.add('hidden');
        updateTitle(Number(taskId), newTitle);
      });

      titleInput.addEventListener('keydown', (e) => {
        const newTitle = e.target?.value;
        if (e.key === 'Enter') {
          titleInput.blur();
          updateTitle(Number(taskId), newTitle);
        }
      });
    });

    //content edit
    document.querySelectorAll('[id^=js-content-display]').forEach((contentDisplay) => {
      const taskId = contentDisplay.id.replace('js-content-display-', '');
      const contentInput = document.getElementById(`js-content-input-${taskId}`);

      if (!contentInput) return;

      contentDisplay.addEventListener('click', () => {
        contentDisplay.classList.add('hidden');
        contentInput.classList.remove('hidden');
        contentInput.focus();
      });

      contentInput.addEventListener('blur', async (e: Event) => {
        contentDisplay.classList.remove('hidden');
        contentInput.classList.add('hidden');
        updateContent(taskId, e.target?.value);
      });
    });
  }

  document.addEventListener('change', (e) => {
    if (!(e.target instanceof HTMLSelectElement)) return;
    if (!e.target.id.startsWith('js-content-select-')) return;
    updateStatus(e);
  });

  function updateTitle(id: number, newTitle: string) {
    console.log('updateTitle', id, newTitle);
    const task = taskListInstance.getTaskById(Number(id));
    if (!task) return;
    // update the title of the task
    const updatedTask = taskListInstance.update(Number(id), { title: newTitle });
    // re-render
    renderTaskCard();
    renderModal();
    addEventListenerModal();
    console.log('Updated Task:', updatedTask);
  }

  function updateContent(id: number | string, newContent: string) {
    console.log('updateContent', id, newContent);
    const task = taskListInstance.getTaskById(Number(id));
    if (!task) return;
    // update the content of the task
    const updatedTask = taskListInstance.update(Number(id), { description: newContent });
    // re-render
    renderTaskCard();
    renderModal();
    addEventListenerModal();
    console.log('Updated Task:', updatedTask);
  }

  function updateStatus(event) {
    const newStatus = event.target.value;
    const taskId = event.target.id.replace('js-content-select-', '');
    const task = taskListInstance.getTaskById(Number(taskId));
    if (!task) return;
    // update the status of the task
    const updatedTask = taskListInstance.update(Number(taskId), {
      status: statusList.find((status) => status.key === newStatus),
    });
    // re-render
    renderTaskCard();
    renderModal();
    addEventListenerModal();
    console.log('Updated Task:', updatedTask);
  }

  // sample data
  taskListInstance.add({
    title: 'project02',
    description: 'Complete the final assignment for the course',
    status: statusList[0],
  });
  taskListInstance.add({
    title: 'presentation03',
    description: 'Complete the final assignment for the course',
    status: statusList[0],
  });
  taskListInstance.add({
    title: 'test',
    description: 'Complete the final assignment for the course',
    status: statusList[0],
  });
</script>
