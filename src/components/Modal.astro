---
const statusList = {
  1: "ToDo",
  2: "InProgress",
  3: "Done"
};

interface Task {
  id: number;
  title: string;
  content: string;
  status: number;
}

const task: Task = {
    id: 1,
    title: "OOP and TS - Final Project",
    content: "Create a simple Kanban board web app.",
    status: 1,
  }
---

<div>
  <label for={`task-${task.id}`} class="btn">Open Modal</label>
  <input type="checkbox" id={`task-${task.id}`} class="modal-toggle" />
  <div class="modal" role="dialog">
    <div class="modal-box flex flex-col gap-3">
      <h3 class="text-lg">
        <div id={`js-title-display-${task.id}`} class="cursor-pointer font-bold px-4 rounded-lg leading-[3rem] hover:bg-gray-50">{task.title}</div>
        <input id={`js-title-input-${task.id}`} type="text" value={task.title} class="hidden input input-bordered w-full" />
      </h3>
      <div class="h-32 flex">
        <p id={`js-content-display-${task.id}`} class="size-full p-4 overflow-x-scroll rounded-lg hover:bg-gray-50">{task.content}</p>
        <textarea id={`js-content-input-${task.id}`} class="hidden input input-bordered size-full p-4" rows="5" style="height:100%; padding:1rem">{task.content}</textarea>
      </div>
      <div class="w-full max-w-xs">
        <div class="relative">
          <select 
            id={`js-content-select-${task.id}`}
            name="task-status" 
            class="select select-bordered w-full pl-10 pr-4 py-2"
            onchange="updateStatus(event)"
          >
            {Object.entries(statusList).map(([key, value]) => (
              <option value={key} selected={parseInt(key) === task.status} >
                {value}
              </option>
            ))}
          </select>
        </div>
      </div>
    </div>
    <label class="modal-backdrop" for={`task-${task.id}`}></label>
  </div>
</div>

<script is:inline>

function updateTitle(id,newTitle){
  console.log(newTitle);
}

function updateContent(id,newContent){
  console.log(newContent);
}

function updateStatus(event) {
    const newStatus = event.target.value;
    console.log(newStatus);
  }

document.addEventListener("DOMContentLoaded", () => {
  
  // title edit
  document.querySelectorAll("[id^=js-title-display]").forEach(titleDisplay => {
    const taskId = titleDisplay.id.replace("js-title-display-", "");
    const titleInput = document.getElementById(`js-title-input-${taskId}`);
    
    if (!titleInput) return;

    titleDisplay.addEventListener("click", () => {
      titleDisplay.classList.add("hidden");
      titleInput.classList.remove("hidden");
      titleInput.focus();
    });

    titleInput.addEventListener("blur", async (e) => {
      const newTitle = e.target?.value;
      titleDisplay.textContent = newTitle;
      titleDisplay.classList.remove("hidden");
      titleInput.classList.add("hidden");
      updateTitle(taskId,newTitle);
    });

    titleInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        titleInput.blur();
      }
    });
  });

  //content edit
  document.querySelectorAll("[id^=js-content-display]").forEach(contentDisplay => {
    const taskId = contentDisplay.id.replace("js-content-display-", "");
    const contentInput = document.getElementById(`js-content-input-${taskId}`);
    
    if (!contentInput) return;

    contentDisplay.addEventListener("click", () => {
      contentDisplay.classList.add("hidden");
      contentInput.classList.remove("hidden");
      contentInput.focus();
    });

    contentInput.addEventListener("blur", async (e) => {
      const newContent= e.target?.value;
      contentDisplay.textContent = newContent;
      contentDisplay.classList.remove("hidden");
      contentInput.classList.add("hidden");
      updateContent(taskId,newContent);
    });
  });
});
</script>
