---
import type { TaskData } from '../types';

interface Props {
  data: TaskData;
  taskId: string;
  columnTitle: string;
}

const { data, taskId, columnTitle } = Astro.props;

const colorClasses = {
  blue: 'bg-blue-500',
  orange: 'bg-orange-500',
  pink: 'bg-pink-500',
  green: 'bg-green-500',
};
---

<div
  class="bg-white rounded-lg p-4 relative shadow-sm cursor-move task-card"
  id={taskId}
  draggable="true"
  data-task-id={taskId}
  data-task-title={data.title}
  data-task-category={data.category}
>
  <div class="text-xs text-slate-500 mb-2">{data.category}</div>
  <h3 class="text-base font-semibold mb-2">{data.title}</h3>
  <p class="text-sm text-slate-500 mb-4">{data.description}</p>
  <div class="flex gap-1">
    {
      data.assignees.map((assignee) => (
        <div
          class={`w-7 h-7 rounded-full flex items-center justify-center text-xs text-white ${colorClasses[assignee.color]}`}
        >
          {assignee.initials}
        </div>
      ))
    }
  </div>

  <div class="relative">
    <button
      class="absolute top-[-40px] right-[-12px] p-1 hover:bg-slate-100 rounded task-menu-button"
      data-task-id={taskId}
    >
      •••
    </button>
    <div
      id={`menu-${taskId}`}
      class="absolute hidden right-[-10px] top-[-30px] bg-white shadow-md rounded-md z-10 task-menu"
    >
      <ul class="py-1">
        <li>
          <button
            class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 edit-task-button"
            data-task-id={taskId}
            data-column-title={columnTitle}
          >
            Edit
          </button>
        </li>
        <li>
          <button
            class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100 delete-task-button"
            data-task-id={taskId}
          >
            Delete
          </button>
        </li>
      </ul>
    </div>
  </div>

  <dialog
    id={`edit-modal-${taskId}`}
    class="backdrop:bg-black backdrop:bg-opacity-50 p-0 rounded-lg"
  >
    <div class="bg-white p-6 w-full max-w-md">
      <h2 class="text-xl font-semibold mb-4">Edit Task</h2>
      <form method="dialog" id={`edit-form-${taskId}`}>
        <input type="hidden" name="taskId" value={taskId} />
        <input type="hidden" name="columnTitle" value={columnTitle} />
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-1"> Category </label>
          <input
            type="text"
            name="category"
            class="w-full p-2 border rounded-md"
            value={data.category}
            required
          />
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-1"> Title </label>
          <input
            type="text"
            name="title"
            class="w-full p-2 border rounded-md"
            value={data.title}
            required
          />
        </div>
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-1"> Description </label>
          <textarea name="description" class="w-full p-2 border rounded-md" rows="3" required
            >{data.description}</textarea
          >
        </div>
        <div class="flex justify-end gap-2">
          <button
            type="button"
            class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md"
            onclick={`document.getElementById('edit-modal-${taskId}').close()`}
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
          >
            Save Changes
          </button>
        </div>
      </form>
    </div>
  </dialog>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.task-menu-button').forEach((button) => {
      button.addEventListener('click', (e) => {
        e.stopPropagation();
        const taskId = button.getAttribute('data-task-id');
        const menu = document.getElementById(`menu-${taskId}`);

        document.querySelectorAll('.task-menu').forEach((m) => {
          if (m.id !== `menu-${taskId}`) {
            m.classList.add('hidden');
          }
        });

        menu.classList.toggle('hidden');
      });
    });

    document.querySelectorAll('.edit-task-button').forEach((button) => {
      button.addEventListener('click', () => {
        const taskId = button.getAttribute('data-task-id');
        const modal = document.getElementById(`edit-modal-${taskId}`);
        if (modal instanceof HTMLDialogElement) {
          modal.showModal();
        }

        document.getElementById(`menu-${taskId}`).classList.add('hidden');
      });
    });

    document.querySelectorAll('.delete-task-button').forEach((button) => {
      button.addEventListener('click', () => {
        const taskId = button.getAttribute('data-task-id');
        const taskElement = document.getElementById(taskId);

        if (confirm('Are you sure you want to delete this task?')) {
          document.dispatchEvent(
            new CustomEvent('task-deleted', {
              detail: { taskId },
            }),
          );

          if (taskElement) {
            taskElement.remove();
          }
        }

        document.getElementById(`menu-${taskId}`).classList.add('hidden');
      });
    });

    document.querySelectorAll('form[id^="edit-form-"]').forEach((form) => {
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const taskId = formData.get('taskId');
        const task = {
          id: taskId,
          category: formData.get('category'),
          title: formData.get('title'),
          description: formData.get('description'),
        };

        document.dispatchEvent(
          new CustomEvent('task-updated', {
            detail: { task },
          }),
        );

        const modalId = `edit-modal-${taskId}`;
        document.getElementById(modalId).close();
      });
    });

    document.addEventListener('click', () => {
      document.querySelectorAll('.task-menu').forEach((menu) => {
        menu.classList.add('hidden');
      });
    });
  });
</script>
